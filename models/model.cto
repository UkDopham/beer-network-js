/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.acme.beer

/* status d'une Shipment*/

enum StatutShipment {
  o CREATED
  o IN_TRANSIT
  o ARRIVED	
}
/* ***********************************    Def des Participants     *************************************** */ 

abstract participant Professionnel identified by email {
  o String libelle 
  o String email
  o String country optional 
  o Double accountBalance
}

/* Def d'un Brewer ( extension d'un pro ) */

participant Brewer extends Professionnel {
}

/* Def d'un Shipper ( extension d'un pro ) */

participant Shipper extends Professionnel {
}

/* Def d'un Importer ( extension d'un pro ) */

participant Importer extends Professionnel {
}


/* ***********************************************   FIN   *********************************************** */

/* **************************************    Def des Assets    ******************************************* */

// Shipment associé à  un contrat 

asset Shipment identified by shipmentId {
  o String shipmentId
  o StatutShipment statut
  o Long unitCount
  o LectureTemperature[] lectureTemperature optional
}


// Contract qui lit les 3 pariticipants
asset Contract identified by contratId {
  o String contratId
  o String etape // initial, intermediaire , finale 
  --> Shipment shipment
  --> Brewer brewer
  --> Shipper shipper
  --> Importer importer
  o String depart 
  o String arrive // en reflexion : pour controler les points de passage 
  o DateTime arriverDateTime
  o Double unitPrice
  o Double minTemperature
  o Double maxTemperature
  o Double minPenaliteFacteur
  o Double maxPenaliteFacteur
}

/* ***********************************************   FIN   *********************************************** */

/* ***************************************   DEF DES TRANSCATIONS   ************************************** */

/*  Le recu d'une Shipment est une transaction abstraite liée à une Shipment */
abstract transaction ShipmentRecu {
  --> Contract contract
  o String id_credite  // celui qui est paye par l'acheteur 
}

/*Lecture de la temperature : extension du recu du Shipment ( pas besoin sinon )*/

transaction LectureTemperature extends ShipmentRecu {
	o Double celsius 
}

/* Initialiser les participants  */
transaction SetupParticipant {

} 

/* Initialiser une Demo  */
transaction SetupDemo {

} 

/* ***********************************************   FIN   *********************************************** */